What happens when you initialize a repository? Why do you need to do it?
	It creates an hidden .git directory. This is required so that it keep track of files that are present
	in the repository. History of changes to the files in the repository will be maintained.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	You may have many files in your working directory, but staging area contains only files that you want to 
	include as part of your commit. You add files individually to the staging area and when you commit them, they all
	go as a single unit to the repository as part of a single commit.

How can you use the staging area to make sure you have one commit per logical change?
	You can just add the files that make a logical change to the staging area and commit them. There can be other modified
	files which you can commit as part of another logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	When you want to make some changes and you are not sure whether they will be officially part of your code changes or
	you are experimenting adding new features, you can think of creating a new branch.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	After a merge, all commits will be shown based on the timestamp in git log. This will show the commits from the 
	two different branches running through each other.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Automatic merging saves a lot of time compared to doing merges manually.

	